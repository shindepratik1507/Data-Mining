Write a python program to implement k-means algorithm to build prediction model (Use
Credit Card Dataset CC GENERAL.csv Download from kaggle.com)




import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

# Step 1: Load the dataset (replace with the actual path of CC GENERAL.csv file)
url = 'https://path-to-your-dataset/CC GENERAL.csv'
data = pd.read_csv(url)

# Step 2: Preprocess the dataset
# Check for missing values and handle them
data.fillna(data.mean(), inplace=True)

# Step 3: Select relevant features (excluding 'CUST_ID' if present)
X = data.drop(['CUST_ID'], axis=1, errors='ignore')

# Step 4: Feature scaling (standardization)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 5: Apply K-Means algorithm
# Determine the optimal number of clusters using the Elbow method (optional)
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plotting the Elbow Curve
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method for Optimal Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()

# Step 6: Train KMeans with the optimal number of clusters (e.g., 4 clusters based on Elbow Method)
optimal_clusters = 4
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
y_kmeans = kmeans.fit_predict(X_scaled)

# Step 7: Visualize the clusters using PCA (reducing the dimensions to 2D for visualization)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(8, 5))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y_kmeans, cmap='rainbow', marker='o', edgecolor='k', s=50)
plt.title(f'K-Means Clustering (n_clusters={optimal_clusters})')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()

# Step 8: Add cluster labels to the original dataset
data['Cluster'] = y_kmeans

# Step 9: Analyze cluster centers (scaled values)
cluster_centers = kmeans.cluster_centers_
print("Cluster Centers (scaled):")
print(cluster_centers)

# Optionally, save the clustered data to a CSV file
data.to_csv('clustered_credit_card_data.csv', index=False)